


(library
 (name    arith)      ; name of the opam library
 (libraries menhirLib)
 (public_name arith)  ; required for generating documentation
                    ; also requires let.opam in root of workspace
 (synopsis "Interpreter for ARITH")
 ;; (wrapped      false) ; true by default
)

; the next line avoids warnings from stopping the build
(env
  (dev
   (flags (:standard -warn-error -A))))

(ocamllex lexer)

(menhir
  (modules parser)
  (flags -lg 1 -la 1 -lc 2 --dump)
)

;; Note
;; Modules Ds,Ast,Interp,Lexer and Parser are placed as submodules inside a
;; wrapper module Let. Let__Ds is declared an alias to Let.Ds (and similar with
;; the others).

;; -----------------------------------------------------------------------------

;; This section deals with the .messages file.

;; The following rule generates "parserMessages.ml" based on the source file
;; "parserMessages.messages". It requires the completeness check to have been
;; performed first. (If desired, this check could be disabled.)

(rule
  (deps parserMessages.check)
  (action (with-stdout-to parserMessages.ml
    (run menhir
      %{dep:parser.mly}
      --compile-errors %{dep:parserMessages.messages}
    )
  ))
)

;; This rule generates a file "parserMessages.auto.messages" that contains a
;; list of all error states. It is used by the completeness check.

(rule
  (with-stdout-to parserMessages.auto.messages
    (run menhir
       %{dep:parser.mly}
       --list-errors
    )
  )
)

;; This rule implements the completeness check. It checks that every error
;; state listed in the auto-generated file "parserMessages.auto.messages"
;; is also listed in the file "parserMessages.messages" that is maintained
;; by the programmer.

(rule
  (with-stdout-to parserMessages.check
  (run menhir
    %{dep:parser.mly}
    --compare-errors %{dep:parserMessages.auto.messages}
    --compare-errors %{dep:parserMessages.messages}
  ))
)

;; -----------------------------------------------------------------------------
