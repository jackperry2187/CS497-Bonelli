prog: TIMES
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

insert random message

prog: SND TIMES
##
## Ends in an error in state: 1.
##
## expr -> SND . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SND
##

insert random message

prog: SND LPAREN TIMES
##
## Ends in an error in state: 2.
##
## expr -> SND LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SND LPAREN
##

insert random message

prog: SETREF TIMES
##
## Ends in an error in state: 3.
##
## expr -> SETREF . LPAREN expr COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SETREF
##

insert random message

prog: SETREF LPAREN TIMES
##
## Ends in an error in state: 4.
##
## expr -> SETREF LPAREN . expr COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN
##

insert random message

prog: SET TIMES
##
## Ends in an error in state: 5.
##
## expr -> SET . ID EQUALS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SET
##

insert random message

prog: SET ID TIMES
##
## Ends in an error in state: 6.
##
## expr -> SET ID . EQUALS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SET ID
##

insert random message

prog: SET ID EQUALS TIMES
##
## Ends in an error in state: 7.
##
## expr -> SET ID EQUALS . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS
##

insert random message

prog: PROC TIMES
##
## Ends in an error in state: 8.
##
## expr -> PROC . LPAREN ID RPAREN LBRACE expr RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC
##

insert random message

prog: PROC LPAREN TIMES
##
## Ends in an error in state: 9.
##
## expr -> PROC LPAREN . ID RPAREN LBRACE expr RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN
##

insert random message

prog: PROC LPAREN ID TIMES
##
## Ends in an error in state: 10.
##
## expr -> PROC LPAREN ID . RPAREN LBRACE expr RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID
##

insert random message

prog: PROC LPAREN ID RPAREN TIMES
##
## Ends in an error in state: 11.
##
## expr -> PROC LPAREN ID RPAREN . LBRACE expr RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN
##

insert random message

prog: PROC LPAREN ID RPAREN LBRACE TIMES
##
## Ends in an error in state: 12.
##
## expr -> PROC LPAREN ID RPAREN LBRACE . expr RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN LBRACE
##

insert random message

prog: PAIR TIMES
##
## Ends in an error in state: 13.
##
## expr -> PAIR . LPAREN expr COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PAIR
##

insert random message

prog: PAIR LPAREN TIMES
##
## Ends in an error in state: 14.
##
## expr -> PAIR LPAREN . expr COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN
##

insert random message

prog: NOT TIMES
##
## Ends in an error in state: 15.
##
## expr -> NOT . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NOT
##

insert random message

prog: NOT LPAREN TIMES
##
## Ends in an error in state: 16.
##
## expr -> NOT LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NOT LPAREN
##

insert random message

prog: NEWREF TIMES
##
## Ends in an error in state: 17.
##
## expr -> NEWREF . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF
##

insert random message

prog: NEWREF LPAREN TIMES
##
## Ends in an error in state: 18.
##
## expr -> NEWREF LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN
##

insert random message

prog: LPAREN TIMES
##
## Ends in an error in state: 19.
##
## expr -> LPAREN . expr expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> LPAREN . MINUS expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

insert random message

prog: LPAREN MINUS TIMES
##
## Ends in an error in state: 20.
##
## expr -> LPAREN MINUS . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS
##

insert random message

prog: LETREC TIMES
##
## Ends in an error in state: 21.
##
## expr -> LETREC . ID LPAREN ID RPAREN EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC
##

insert random message

prog: LETREC ID TIMES
##
## Ends in an error in state: 22.
##
## expr -> LETREC ID . LPAREN ID RPAREN EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID
##

insert random message

prog: LETREC ID LPAREN TIMES
##
## Ends in an error in state: 23.
##
## expr -> LETREC ID LPAREN . ID RPAREN EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN
##

insert random message

prog: LETREC ID LPAREN ID TIMES
##
## Ends in an error in state: 24.
##
## expr -> LETREC ID LPAREN ID . RPAREN EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID
##

insert random message

prog: LETREC ID LPAREN ID RPAREN TIMES
##
## Ends in an error in state: 25.
##
## expr -> LETREC ID LPAREN ID RPAREN . EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN
##

insert random message

prog: LETREC ID LPAREN ID RPAREN EQUALS TIMES
##
## Ends in an error in state: 26.
##
## expr -> LETREC ID LPAREN ID RPAREN EQUALS . expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS
##

insert random message

prog: LET TIMES
##
## Ends in an error in state: 27.
##
## expr -> LET . ID EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET
##

insert random message

prog: LET ID TIMES
##
## Ends in an error in state: 28.
##
## expr -> LET ID . EQUALS expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET ID
##

insert random message

prog: LET ID EQUALS TIMES
##
## Ends in an error in state: 29.
##
## expr -> LET ID EQUALS . expr IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

insert random message

prog: ISZERO TIMES
##
## Ends in an error in state: 30.
##
## expr -> ISZERO . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO
##

insert random message

prog: ISZERO LPAREN TIMES
##
## Ends in an error in state: 31.
##
## expr -> ISZERO LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN
##

insert random message

prog: IF TIMES
##
## Ends in an error in state: 33.
##
## expr -> IF . expr THEN expr ELSE expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF
##

insert random message

prog: FST TIMES
##
## Ends in an error in state: 35.
##
## expr -> FST . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## FST
##

insert random message

prog: FST LPAREN TIMES
##
## Ends in an error in state: 36.
##
## expr -> FST LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## FST LPAREN
##

insert random message

prog: DEREF TIMES
##
## Ends in an error in state: 37.
##
## expr -> DEREF . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## DEREF
##

insert random message

prog: DEREF LPAREN TIMES
##
## Ends in an error in state: 38.
##
## expr -> DEREF LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN
##

insert random message

prog: DEBUG TIMES
##
## Ends in an error in state: 39.
##
## expr -> DEBUG . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG
##

insert random message

prog: DEBUG LPAREN TIMES
##
## Ends in an error in state: 40.
##
## expr -> DEBUG LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN
##

insert random message

prog: BEGIN TIMES
##
## Ends in an error in state: 41.
##
## expr -> BEGIN . exprs END [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## BEGIN
##

insert random message

prog: ABS TIMES
##
## Ends in an error in state: 42.
##
## expr -> ABS . LPAREN expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ABS
##

insert random message

prog: ABS LPAREN TIMES
##
## Ends in an error in state: 43.
##
## expr -> ABS LPAREN . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN
##

insert random message

prog: ABS LPAREN ID THEN
##
## Ends in an error in state: 44.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> ABS LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN expr
##

insert random message

prog: ID TIMES TIMES
##
## Ends in an error in state: 45.
##
## expr -> expr TIMES . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

insert random message

prog: ID PLUS TIMES
##
## Ends in an error in state: 48.
##
## expr -> expr PLUS . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

insert random message

prog: ID PLUS ID LBRACE
##
## Ends in an error in state: 49.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr PLUS expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

insert random message

prog: ID DIVIDED TIMES
##
## Ends in an error in state: 50.
##
## expr -> expr DIVIDED . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED
##

insert random message

prog: ID MINUS TIMES
##
## Ends in an error in state: 52.
##
## expr -> expr MINUS . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

insert random message

prog: ID MINUS ID LBRACE
##
## Ends in an error in state: 53.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr MINUS expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

insert random message

prog: BEGIN ID THEN
##
## Ends in an error in state: 58.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MINUS END DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MINUS END DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MINUS END DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON PLUS MINUS END DIVIDED ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . [ END ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . SEMICOLON separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr
##

insert random message

prog: BEGIN ID SEMICOLON TIMES
##
## Ends in an error in state: 59.
##
## separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON . separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

insert random message

prog: DEBUG LPAREN ID THEN
##
## Ends in an error in state: 61.
##
## expr -> DEBUG LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN expr
##

insert random message

prog: DEREF LPAREN ID THEN
##
## Ends in an error in state: 63.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> DEREF LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN expr
##

insert random message

prog: FST LPAREN ID THEN
##
## Ends in an error in state: 65.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> FST LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## FST LPAREN expr
##

insert random message

prog: IF ID SND
##
## Ends in an error in state: 67.
##
## expr -> expr . PLUS expr [ TIMES THEN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES THEN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES THEN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES THEN PLUS MINUS DIVIDED ]
## expr -> IF expr . THEN expr ELSE expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF expr
##

insert random message

prog: IF ID THEN TIMES
##
## Ends in an error in state: 68.
##
## expr -> IF expr THEN . expr ELSE expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

insert random message

prog: IF ID THEN ID THEN
##
## Ends in an error in state: 69.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS ELSE DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS ELSE DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS ELSE DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS ELSE DIVIDED ]
## expr -> IF expr THEN expr . ELSE expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

insert random message

prog: IF ID THEN ID ELSE TIMES
##
## Ends in an error in state: 70.
##
## expr -> IF expr THEN expr ELSE . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

insert random message

prog: IF ID THEN ID ELSE ID LBRACE
##
## Ends in an error in state: 71.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> IF expr THEN expr ELSE expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

insert random message

prog: ISZERO LPAREN ID THEN
##
## Ends in an error in state: 72.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> ISZERO LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN expr
##

insert random message

prog: LET ID EQUALS ID THEN
##
## Ends in an error in state: 74.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> LET ID EQUALS expr . IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr
##

insert random message

prog: LET ID EQUALS ID IN TIMES
##
## Ends in an error in state: 75.
##
## expr -> LET ID EQUALS expr IN . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN
##

insert random message

prog: LET ID EQUALS ID IN ID LBRACE
##
## Ends in an error in state: 76.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> LET ID EQUALS expr IN expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN expr
##

insert random message

prog: LETREC ID LPAREN ID RPAREN EQUALS ID THEN
##
## Ends in an error in state: 77.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DIVIDED ]
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr . IN expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr
##

insert random message

prog: LETREC ID LPAREN ID RPAREN EQUALS ID IN TIMES
##
## Ends in an error in state: 78.
##
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr IN . expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr IN
##

insert random message

prog: LETREC ID LPAREN ID RPAREN EQUALS ID IN ID LBRACE
##
## Ends in an error in state: 79.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr IN expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr IN expr
##

insert random message

prog: LPAREN MINUS ID THEN
##
## Ends in an error in state: 80.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> LPAREN MINUS expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS expr
##

insert random message

prog: LPAREN ID THEN
##
## Ends in an error in state: 82.
##
## expr -> expr . PLUS expr [ TIMES SND SETREF SET RPAREN PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IF ID FST DIVIDED DEREF DEBUG BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES SND SETREF SET RPAREN PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IF ID FST DIVIDED DEREF DEBUG BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES SND SETREF SET RPAREN PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IF ID FST DIVIDED DEREF DEBUG BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES SND SETREF SET RPAREN PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IF ID FST DIVIDED DEREF DEBUG BEGIN ABS ]
## expr -> LPAREN expr . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

insert random message

prog: LPAREN ID ID THEN
##
## Ends in an error in state: 84.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> LPAREN expr expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr expr
##

insert random message

prog: NEWREF LPAREN ID THEN
##
## Ends in an error in state: 86.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> NEWREF LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN expr
##

insert random message

prog: NOT LPAREN ID THEN
##
## Ends in an error in state: 88.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> NOT LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## NOT LPAREN expr
##

insert random message

prog: PAIR LPAREN ID THEN
##
## Ends in an error in state: 90.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> PAIR LPAREN expr . COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr
##

insert random message

prog: PAIR LPAREN ID COMMA TIMES
##
## Ends in an error in state: 91.
##
## expr -> PAIR LPAREN expr COMMA . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA
##

insert random message

prog: PAIR LPAREN ID COMMA ID THEN
##
## Ends in an error in state: 92.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> PAIR LPAREN expr COMMA expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA expr
##

insert random message

prog: PROC LPAREN ID RPAREN LBRACE ID THEN
##
## Ends in an error in state: 94.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DIVIDED ]
## expr -> PROC LPAREN ID RPAREN LBRACE expr . RBRACE [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN LBRACE expr
##

insert random message

prog: SET ID EQUALS ID LBRACE
##
## Ends in an error in state: 96.
##
## expr -> expr . PLUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . MINUS expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . TIMES expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> expr . DIVIDED expr [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
## expr -> SET ID EQUALS expr . [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS expr
##

insert random message

prog: SETREF LPAREN ID THEN
##
## Ends in an error in state: 97.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DIVIDED COMMA ]
## expr -> SETREF LPAREN expr . COMMA expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr
##

insert random message

prog: SETREF LPAREN ID COMMA TIMES
##
## Ends in an error in state: 98.
##
## expr -> SETREF LPAREN expr COMMA . expr RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA
##

insert random message

prog: SETREF LPAREN ID COMMA ID THEN
##
## Ends in an error in state: 99.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> SETREF LPAREN expr COMMA expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA expr
##

insert random message

prog: SND LPAREN ID THEN
##
## Ends in an error in state: 101.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DIVIDED ]
## expr -> SND LPAREN expr . RPAREN [ TIMES THEN SND SETREF SET SEMICOLON RPAREN RBRACE PROC PLUS PAIR NOT NEWREF MINUS LPAREN LETREC LET ISZERO INT IN IF ID FST EOF END ELSE DIVIDED DEREF DEBUG COMMA BEGIN ABS ]
##
## The known suffix of the stack is as follows:
## SND LPAREN expr
##

insert random message

prog: ID THEN
##
## Ends in an error in state: 104.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS EOF DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS EOF DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS EOF DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS EOF DIVIDED ]
## prog -> expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## expr
##

insert random message

