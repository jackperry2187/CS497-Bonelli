prog: BEGIN SELF SEMICOLON TIMES
##
## Ends in an error in state: 98.
##
## separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON . separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE> 98

prog: BEGIN SELF UNPAIR
##
## Ends in an error in state: 93.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON PLUS MINUS END DOT DIVIDED ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . [ END ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . SEMICOLON separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 93

prog: BEGIN TIMES
##
## Ends in an error in state: 88.
##
## expr -> BEGIN . exprs END [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## BEGIN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 88

prog: CLASS ID EXTENDS ID LBRACE FIELD ID UNPAIR
##
## Ends in an error in state: 8.
##
## list(obj_fields) -> obj_fields . list(obj_fields) [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## obj_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE> 8

prog: CLASS ID EXTENDS ID LBRACE FIELD UNPAIR
##
## Ends in an error in state: 6.
##
## obj_fields -> FIELD . ID [ RBRACE METHOD FIELD ]
##
## The known suffix of the stack is as follows:
## FIELD
##

<YOUR SYNTAX ERROR MESSAGE HERE> 6

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 15.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 15

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN ID UNPAIR
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RPAREN ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 14

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE ID RBRACE UNPAIR
##
## Ends in an error in state: 186.
##
## list(method_decl) -> method_decl . list(method_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## method_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE> 186

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE SELF UNPAIR
##
## Ends in an error in state: 184.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE expr . RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 184

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE TIMES
##
## Ends in an error in state: 20.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE . expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 20

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 19.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN . LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 19

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN UNPAIR
##
## Ends in an error in state: 13.
##
## method_decl -> METHOD ID LPAREN . loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 13

prog: CLASS ID EXTENDS ID LBRACE METHOD ID UNPAIR
##
## Ends in an error in state: 12.
##
## method_decl -> METHOD ID . LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 12

prog: CLASS ID EXTENDS ID LBRACE METHOD UNPAIR
##
## Ends in an error in state: 11.
##
## method_decl -> METHOD . ID LPAREN loption(separated_nonempty_list(COMMA,ID)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD
##

<YOUR SYNTAX ERROR MESSAGE HERE> 11

prog: CLASS ID EXTENDS ID LBRACE RBRACE TIMES
##
## Ends in an error in state: 194.
##
## list(class_decl) -> class_decl . list(class_decl) [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS BEGIN ]
##
## The known suffix of the stack is as follows:
## class_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE> 194

prog: CLASS ID EXTENDS ID LBRACE UNPAIR
##
## Ends in an error in state: 5.
##
## class_decl -> CLASS ID EXTENDS ID LBRACE . list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS CLASS BEGIN ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 5

prog: CLASS ID EXTENDS ID UNPAIR
##
## Ends in an error in state: 4.
##
## class_decl -> CLASS ID EXTENDS ID . LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS CLASS BEGIN ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 4

prog: CLASS ID EXTENDS UNPAIR
##
## Ends in an error in state: 3.
##
## class_decl -> CLASS ID EXTENDS . ID LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS CLASS BEGIN ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 3

prog: CLASS ID UNPAIR
##
## Ends in an error in state: 2.
##
## class_decl -> CLASS ID . EXTENDS ID LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS CLASS BEGIN ]
##
## The known suffix of the stack is as follows:
## CLASS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 2

prog: CLASS UNPAIR
##
## Ends in an error in state: 1.
##
## class_decl -> CLASS . ID EXTENDS ID LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SND SETREF SET SEND SELF PROC PAIR NEWREF NEW LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DEREF DEBUG CONS CLASS BEGIN ]
##
## The known suffix of the stack is as follows:
## CLASS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 1

prog: CONS LPAREN SELF COMMA SELF UNPAIR
##
## Ends in an error in state: 108.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> CONS LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 108

prog: CONS LPAREN SELF COMMA TIMES
##
## Ends in an error in state: 107.
##
## expr -> CONS LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 107

prog: CONS LPAREN SELF UNPAIR
##
## Ends in an error in state: 106.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> CONS LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 106

prog: CONS LPAREN TIMES
##
## Ends in an error in state: 87.
##
## expr -> CONS LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 87

prog: CONS UNPAIR
##
## Ends in an error in state: 86.
##
## expr -> CONS . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 86

prog: DEBUG LPAREN SELF UNPAIR
##
## Ends in an error in state: 110.
##
## expr -> DEBUG LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 110

prog: DEBUG LPAREN TIMES
##
## Ends in an error in state: 85.
##
## expr -> DEBUG LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 85

prog: DEBUG UNPAIR
##
## Ends in an error in state: 84.
##
## expr -> DEBUG . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## DEBUG
##

<YOUR SYNTAX ERROR MESSAGE HERE> 84

prog: DEREF LPAREN SELF UNPAIR
##
## Ends in an error in state: 112.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> DEREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 112

prog: DEREF LPAREN TIMES
##
## Ends in an error in state: 83.
##
## expr -> DEREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 83

prog: DEREF UNPAIR
##
## Ends in an error in state: 82.
##
## expr -> DEREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## DEREF
##

<YOUR SYNTAX ERROR MESSAGE HERE> 82

prog: EMPTYPRED LPAREN SELF UNPAIR
##
## Ends in an error in state: 114.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> EMPTYPRED LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 114

prog: EMPTYPRED LPAREN TIMES
##
## Ends in an error in state: 81.
##
## expr -> EMPTYPRED LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 81

prog: EMPTYPRED UNPAIR
##
## Ends in an error in state: 80.
##
## expr -> EMPTYPRED . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED
##

<YOUR SYNTAX ERROR MESSAGE HERE> 80

prog: FST LPAREN SELF UNPAIR
##
## Ends in an error in state: 116.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> FST LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## FST LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 116

prog: FST LPAREN TIMES
##
## Ends in an error in state: 79.
##
## expr -> FST LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## FST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 79

prog: FST UNPAIR
##
## Ends in an error in state: 78.
##
## expr -> FST . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## FST
##

<YOUR SYNTAX ERROR MESSAGE HERE> 78

prog: HD LPAREN SELF UNPAIR
##
## Ends in an error in state: 118.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> HD LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## HD LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 118

prog: HD LPAREN TIMES
##
## Ends in an error in state: 77.
##
## expr -> HD LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## HD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 77

prog: HD UNPAIR
##
## Ends in an error in state: 76.
##
## expr -> HD . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## HD
##

<YOUR SYNTAX ERROR MESSAGE HERE> 76

prog: IF SELF THEN SELF ELSE SELF METHOD
##
## Ends in an error in state: 124.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> IF expr THEN expr ELSE expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 124

prog: IF SELF THEN SELF ELSE TIMES
##
## Ends in an error in state: 123.
##
## expr -> IF expr THEN expr ELSE . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 123

prog: IF SELF THEN SELF UNPAIR
##
## Ends in an error in state: 122.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
## expr -> IF expr THEN expr . ELSE expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS ELSE DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 122

prog: IF SELF THEN TIMES
##
## Ends in an error in state: 121.
##
## expr -> IF expr THEN . expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 121

prog: IF SELF UNPAIR
##
## Ends in an error in state: 120.
##
## expr -> expr . PLUS expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES THEN PLUS MINUS DOT DIVIDED ]
## expr -> IF expr . THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES THEN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 120

prog: IF TIMES
##
## Ends in an error in state: 74.
##
## expr -> IF . expr THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE> 74

prog: ISZERO LPAREN SELF UNPAIR
##
## Ends in an error in state: 125.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> ISZERO LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 125

prog: ISZERO LPAREN TIMES
##
## Ends in an error in state: 72.
##
## expr -> ISZERO LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 72

prog: ISZERO UNPAIR
##
## Ends in an error in state: 71.
##
## expr -> ISZERO . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## ISZERO
##

<YOUR SYNTAX ERROR MESSAGE HERE> 71

prog: LBRACE ID EQUALS ID SEMICOLON UNPAIR
##
## Ends in an error in state: 132.
##
## separated_nonempty_list(SEMICOLON,field) -> field SEMICOLON . separated_nonempty_list(SEMICOLON,field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE> 132

prog: LBRACE ID EQUALS SELF UNPAIR
##
## Ends in an error in state: 127.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON RBRACE PLUS MINUS DOT DIVIDED ]
## field -> ID EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 127

prog: LBRACE ID EQUALS TIMES
##
## Ends in an error in state: 70.
##
## field -> ID EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 70

prog: LBRACE ID UNPAIR
##
## Ends in an error in state: 69.
##
## field -> ID . EQUALS expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 69

prog: LBRACE UNPAIR
##
## Ends in an error in state: 68.
##
## expr -> LBRACE . loption(separated_nonempty_list(SEMICOLON,field)) RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 68

prog: LET ID EQUALS SELF IN SELF METHOD
##
## Ends in an error in state: 136.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LET ID EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 136

prog: LET ID EQUALS SELF IN TIMES
##
## Ends in an error in state: 135.
##
## expr -> LET ID EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 135

prog: LET ID EQUALS SELF UNPAIR
##
## Ends in an error in state: 134.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> LET ID EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 134

prog: LET ID EQUALS TIMES
##
## Ends in an error in state: 67.
##
## expr -> LET ID EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 67

prog: LET ID UNPAIR
##
## Ends in an error in state: 66.
##
## expr -> LET ID . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 66

prog: LET UNPAIR
##
## Ends in an error in state: 65.
##
## expr -> LET . ID EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE> 65

prog: LETREC ID LPAREN ID RPAREN EQUALS SELF IN SELF METHOD
##
## Ends in an error in state: 139.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 139

prog: LETREC ID LPAREN ID RPAREN EQUALS SELF IN TIMES
##
## Ends in an error in state: 138.
##
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 138

prog: LETREC ID LPAREN ID RPAREN EQUALS SELF UNPAIR
##
## Ends in an error in state: 137.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> LETREC ID LPAREN ID RPAREN EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 137

prog: LETREC ID LPAREN ID RPAREN EQUALS TIMES
##
## Ends in an error in state: 64.
##
## expr -> LETREC ID LPAREN ID RPAREN EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 64

prog: LETREC ID LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 63.
##
## expr -> LETREC ID LPAREN ID RPAREN . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 63

prog: LETREC ID LPAREN ID UNPAIR
##
## Ends in an error in state: 62.
##
## expr -> LETREC ID LPAREN ID . RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 62

prog: LETREC ID LPAREN UNPAIR
##
## Ends in an error in state: 61.
##
## expr -> LETREC ID LPAREN . ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 61

prog: LETREC ID UNPAIR
##
## Ends in an error in state: 60.
##
## expr -> LETREC ID . LPAREN ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 60

prog: LETREC UNPAIR
##
## Ends in an error in state: 59.
##
## expr -> LETREC . ID LPAREN ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LETREC
##

<YOUR SYNTAX ERROR MESSAGE HERE> 59

prog: LIST LPAREN SELF COMMA TIMES
##
## Ends in an error in state: 144.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 144

prog: LIST LPAREN SELF UNPAIR
##
## Ends in an error in state: 143.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 143

prog: LIST LPAREN TIMES
##
## Ends in an error in state: 58.
##
## expr -> LIST LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LIST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 58

prog: LIST UNPAIR
##
## Ends in an error in state: 57.
##
## expr -> LIST . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LIST
##

<YOUR SYNTAX ERROR MESSAGE HERE> 57

prog: LPAREN MINUS SELF UNPAIR
##
## Ends in an error in state: 146.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN MINUS expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 146

prog: LPAREN MINUS TIMES
##
## Ends in an error in state: 56.
##
## expr -> LPAREN MINUS . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 56

prog: LPAREN SELF COMMA SELF UNPAIR
##
## Ends in an error in state: 151.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA expr
##

Error 151: Expected a closing ')' for an opening '('.

prog: LPAREN SELF COMMA TIMES
##
## Ends in an error in state: 150.
##
## expr -> LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA
##

Error 150: Expected a second expression after seeing an opening '(', an expression, and a ','.

prog: LPAREN SELF SELF UNPAIR
##
## Ends in an error in state: 153.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> LPAREN expr expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 153

prog: LPAREN SELF THEN
##
## Ends in an error in state: 148.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES SUPER SND SETREF SET SEND SELF RPAREN PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES SUPER SND SETREF SET SEND SELF RPAREN PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES SUPER SND SETREF SET SEND SELF RPAREN PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES SUPER SND SETREF SET SEND SELF RPAREN PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN expr . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES SUPER SND SETREF SET SEND SELF RPAREN PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IF ID HD FST EMPTYPRED DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

Error 148: Expected a closing ')' for an opening '('.

prog: LPAREN TIMES
##
## Ends in an error in state: 54.
##
## expr -> LPAREN . expr expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN . MINUS expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

Error 54: Expected a valid expression and closing ')' for an opening '('.

prog: NEW ID LPAREN TIMES
##
## Ends in an error in state: 53.
##
## expr -> NEW ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## NEW ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 53

prog: NEW ID UNPAIR
##
## Ends in an error in state: 52.
##
## expr -> NEW ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## NEW ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 52

prog: NEW UNPAIR
##
## Ends in an error in state: 51.
##
## expr -> NEW . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## NEW
##

<YOUR SYNTAX ERROR MESSAGE HERE> 51

prog: NEWREF LPAREN SELF UNPAIR
##
## Ends in an error in state: 157.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> NEWREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 157

prog: NEWREF LPAREN TIMES
##
## Ends in an error in state: 50.
##
## expr -> NEWREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 50

prog: NEWREF UNPAIR
##
## Ends in an error in state: 49.
##
## expr -> NEWREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## NEWREF
##

<YOUR SYNTAX ERROR MESSAGE HERE> 49

prog: PAIR LPAREN SELF COMMA SELF UNPAIR
##
## Ends in an error in state: 161.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> PAIR LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 161

prog: PAIR LPAREN SELF COMMA TIMES
##
## Ends in an error in state: 160.
##
## expr -> PAIR LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 160

prog: PAIR LPAREN SELF UNPAIR
##
## Ends in an error in state: 159.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> PAIR LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 159

prog: PAIR LPAREN TIMES
##
## Ends in an error in state: 48.
##
## expr -> PAIR LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 48

prog: PAIR UNPAIR
##
## Ends in an error in state: 47.
##
## expr -> PAIR . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE> 47

prog: PROC LPAREN ID RPAREN LBRACE SELF UNPAIR
##
## Ends in an error in state: 163.
##
## expr -> expr . PLUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
## expr -> PROC LPAREN ID RPAREN LBRACE expr . RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RBRACE PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 163

prog: PROC LPAREN ID RPAREN LBRACE TIMES
##
## Ends in an error in state: 46.
##
## expr -> PROC LPAREN ID RPAREN LBRACE . expr RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE> 46

prog: PROC LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 45.
##
## expr -> PROC LPAREN ID RPAREN . LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 45

prog: PROC LPAREN ID UNPAIR
##
## Ends in an error in state: 44.
##
## expr -> PROC LPAREN ID . RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 44

prog: PROC LPAREN UNPAIR
##
## Ends in an error in state: 43.
##
## expr -> PROC LPAREN . ID RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 43

prog: PROC UNPAIR
##
## Ends in an error in state: 42.
##
## expr -> PROC . LPAREN ID RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## PROC
##

<YOUR SYNTAX ERROR MESSAGE HERE> 42

prog: SELF DIVIDED SELF METHOD
##
## Ends in an error in state: 103.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr DIVIDED expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 103

prog: SELF DIVIDED TIMES
##
## Ends in an error in state: 102.
##
## expr -> expr DIVIDED . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED
##

Error 102: Expected an expression after '/'.

prog: SELF DOT UNPAIR
##
## Ends in an error in state: 96.
##
## expr -> expr DOT . ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE> 96

prog: SELF MINUS SELF METHOD
##
## Ends in an error in state: 105.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr MINUS expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 105

prog: SELF MINUS TIMES
##
## Ends in an error in state: 104.
##
## expr -> expr MINUS . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

Error 104: Expected an expression after '-'.

prog: SELF PLUS SELF METHOD
##
## Ends in an error in state: 101.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr PLUS expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 101

prog: SELF PLUS TIMES
##
## Ends in an error in state: 100.
##
## expr -> expr PLUS . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Error 100: Expected an expression after '+'.

prog: SELF TIMES SELF METHOD
##
## Ends in an error in state: 95.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr TIMES expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 95

prog: SELF TIMES TIMES
##
## Ends in an error in state: 94.
##
## expr -> expr TIMES . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

Error 94: Expected an expression after '*'.

prog: SELF UNPAIR
##
## Ends in an error in state: 192.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS EOF DOT DIVIDED ]
## prog -> list(class_decl) expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(class_decl) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 192

prog: SEND SELF ID LPAREN TIMES
##
## Ends in an error in state: 167.
##
## expr -> SEND expr ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SEND expr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 167

prog: SEND SELF ID UNPAIR
##
## Ends in an error in state: 166.
##
## expr -> SEND expr ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SEND expr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 166

prog: SEND SELF UNPAIR
##
## Ends in an error in state: 165.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS ID DOT DIVIDED ]
## expr -> SEND expr . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SEND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 165

prog: SEND TIMES
##
## Ends in an error in state: 40.
##
## expr -> SEND . expr ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SEND
##

<YOUR SYNTAX ERROR MESSAGE HERE> 40

prog: SET ID EQUALS SELF METHOD
##
## Ends in an error in state: 170.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> SET ID EQUALS expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 170

prog: SET ID EQUALS TIMES
##
## Ends in an error in state: 39.
##
## expr -> SET ID EQUALS . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 39

prog: SET ID UNPAIR
##
## Ends in an error in state: 38.
##
## expr -> SET ID . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 38

prog: SET UNPAIR
##
## Ends in an error in state: 37.
##
## expr -> SET . ID EQUALS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SET
##

<YOUR SYNTAX ERROR MESSAGE HERE> 37

prog: SETREF LPAREN SELF COMMA SELF UNPAIR
##
## Ends in an error in state: 173.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> SETREF LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 173

prog: SETREF LPAREN SELF COMMA TIMES
##
## Ends in an error in state: 172.
##
## expr -> SETREF LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 172

prog: SETREF LPAREN SELF UNPAIR
##
## Ends in an error in state: 171.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
## expr -> SETREF LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 171

prog: SETREF LPAREN TIMES
##
## Ends in an error in state: 36.
##
## expr -> SETREF LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 36

prog: SETREF UNPAIR
##
## Ends in an error in state: 35.
##
## expr -> SETREF . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SETREF
##

<YOUR SYNTAX ERROR MESSAGE HERE> 35

prog: SND LPAREN SELF UNPAIR
##
## Ends in an error in state: 175.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> SND LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SND LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 175

prog: SND LPAREN TIMES
##
## Ends in an error in state: 34.
##
## expr -> SND LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SND LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 34

prog: SND UNPAIR
##
## Ends in an error in state: 33.
##
## expr -> SND . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SND
##

<YOUR SYNTAX ERROR MESSAGE HERE> 33

prog: SUPER ID LPAREN TIMES
##
## Ends in an error in state: 32.
##
## expr -> SUPER ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SUPER ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 32

prog: SUPER ID UNPAIR
##
## Ends in an error in state: 31.
##
## expr -> SUPER ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SUPER ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 31

prog: SUPER UNPAIR
##
## Ends in an error in state: 30.
##
## expr -> SUPER . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## SUPER
##

<YOUR SYNTAX ERROR MESSAGE HERE> 30

prog: TIMES
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE> 0

prog: TL LPAREN SELF UNPAIR
##
## Ends in an error in state: 179.
##
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RPAREN PLUS MINUS DOT DIVIDED ]
## expr -> TL LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## TL LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 179

prog: TL LPAREN TIMES
##
## Ends in an error in state: 29.
##
## expr -> TL LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## TL LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 29

prog: TL UNPAIR
##
## Ends in an error in state: 28.
##
## expr -> TL . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## TL
##

<YOUR SYNTAX ERROR MESSAGE HERE> 28

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS SELF IN SELF METHOD
##
## Ends in an error in state: 183.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 183

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS SELF IN TIMES
##
## Ends in an error in state: 182.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 182

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS SELF UNPAIR
##
## Ends in an error in state: 181.
##
## expr -> expr . PLUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES PLUS MINUS IN DOT DIVIDED ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
## expr -> expr . DOT ID [ TIMES PLUS MINUS IN DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE> 181

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS TIMES
##
## Ends in an error in state: 27.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE> 27

prog: UNPAIR LPAREN ID COMMA ID RPAREN UNPAIR
##
## Ends in an error in state: 26.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 26

prog: UNPAIR LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 25.
##
## expr -> UNPAIR LPAREN ID COMMA ID . RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 25

prog: UNPAIR LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 24.
##
## expr -> UNPAIR LPAREN ID COMMA . ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE> 24

prog: UNPAIR LPAREN ID UNPAIR
##
## Ends in an error in state: 23.
##
## expr -> UNPAIR LPAREN ID . COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE> 23

prog: UNPAIR LPAREN UNPAIR
##
## Ends in an error in state: 22.
##
## expr -> UNPAIR LPAREN . ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE> 22

prog: UNPAIR UNPAIR
##
## Ends in an error in state: 21.
##
## expr -> UNPAIR . LPAREN ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SND SETREF SET SEND SEMICOLON SELF RPAREN RBRACE PROC PLUS PAIR NEWREF NEW MINUS LPAREN LIST LETREC LET LBRACE ISZERO INT IN IF ID HD FST EOF END EMPTYPRED ELSE DOT DIVIDED DEREF DEBUG CONS COMMA BEGIN ]
##
## The known suffix of the stack is as follows:
## UNPAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE> 21

